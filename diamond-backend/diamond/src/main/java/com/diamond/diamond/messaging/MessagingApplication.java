package com.diamond.diamond.messaging;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
// RabbitTemplate bean is automatically generated by Spring (?)
public class MessagingApplication {
    private static final String topicExchangeName = "spring-boot-exchange";
    private static final String queueName = "spring-boot";

    /*
     * Creates an AMQP queue
     */
    @Bean
    Queue queue() {
        return new Queue(queueName, false);
    }

    /*
     * Creates a topic exchange
     */
    @Bean
    TopicExchange exchange() {
        return new TopicExchange(topicExchangeName);
    }

    /*
     * Binds the queue and exchange together, defining the behaviour  that occurs when RabbitTemplate pushes to an exchange
     */
    @Bean
    Binding binding(Queue queue, TopicExchange exchange) {
        // any messages sent with a routing key that begins with "foo.bar" are routed to the queue
        return BindingBuilder.bind(queue).to(exchange).with("foo.bar.#");
    }

    /*
     * Container where the queue is running
     */
    @Bean
    SimpleMessageListenerContainer container(ConnectionFactory connectionFactory,
        MessageListenerAdapter listenerAdapter) {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setQueueNames(queueName);
        container.setMessageListener(listenerAdapter);
        return container;
    }

    /*
     * Registered as a mesage listener in the container. Listens for messages on the queue
     */
    @Bean
    MessageListenerAdapter listenerAdapter(Receiver receiver) {
        return new MessageListenerAdapter(receiver, "receiveMessage");
    }

    public static void main(String[] args) throws InterruptedException {
        SpringApplication.run(MessagingApplication.class, args).close();
    }

}
