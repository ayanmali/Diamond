// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Swaps_SwapStablesToSpot_FullMethodName = "/proto.Swaps/SwapStablesToSpot"
	Swaps_SwapStablesToFiat_FullMethodName = "/proto.Swaps/SwapStablesToFiat"
	Swaps_SwapSpotToFiat_FullMethodName    = "/proto.Swaps/SwapSpotToFiat"
)

// SwapsClient is the client API for Swaps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapsClient interface {
	// RPC for swapping stablecoins into spot tokens
	SwapStablesToSpot(ctx context.Context, in *SwapStablesToSpotRequest, opts ...grpc.CallOption) (*SwapStablesToSpotResponse, error)
	// RPC for swapping stablecoins into fiat currency
	SwapStablesToFiat(ctx context.Context, in *SwapStablesToFiatRequest, opts ...grpc.CallOption) (*SwapStablesToFiatResponse, error)
	// RPC for swapping spot tokens into fiat currency
	SwapSpotToFiat(ctx context.Context, in *SwapSpotToFiatRequest, opts ...grpc.CallOption) (*SwapSpotToFiatResponse, error)
}

type swapsClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapsClient(cc grpc.ClientConnInterface) SwapsClient {
	return &swapsClient{cc}
}

func (c *swapsClient) SwapStablesToSpot(ctx context.Context, in *SwapStablesToSpotRequest, opts ...grpc.CallOption) (*SwapStablesToSpotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapStablesToSpotResponse)
	err := c.cc.Invoke(ctx, Swaps_SwapStablesToSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapsClient) SwapStablesToFiat(ctx context.Context, in *SwapStablesToFiatRequest, opts ...grpc.CallOption) (*SwapStablesToFiatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapStablesToFiatResponse)
	err := c.cc.Invoke(ctx, Swaps_SwapStablesToFiat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapsClient) SwapSpotToFiat(ctx context.Context, in *SwapSpotToFiatRequest, opts ...grpc.CallOption) (*SwapSpotToFiatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapSpotToFiatResponse)
	err := c.cc.Invoke(ctx, Swaps_SwapSpotToFiat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapsServer is the server API for Swaps service.
// All implementations must embed UnimplementedSwapsServer
// for forward compatibility.
type SwapsServer interface {
	// RPC for swapping stablecoins into spot tokens
	SwapStablesToSpot(context.Context, *SwapStablesToSpotRequest) (*SwapStablesToSpotResponse, error)
	// RPC for swapping stablecoins into fiat currency
	SwapStablesToFiat(context.Context, *SwapStablesToFiatRequest) (*SwapStablesToFiatResponse, error)
	// RPC for swapping spot tokens into fiat currency
	SwapSpotToFiat(context.Context, *SwapSpotToFiatRequest) (*SwapSpotToFiatResponse, error)
	mustEmbedUnimplementedSwapsServer()
}

// UnimplementedSwapsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwapsServer struct{}

func (UnimplementedSwapsServer) SwapStablesToSpot(context.Context, *SwapStablesToSpotRequest) (*SwapStablesToSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapStablesToSpot not implemented")
}
func (UnimplementedSwapsServer) SwapStablesToFiat(context.Context, *SwapStablesToFiatRequest) (*SwapStablesToFiatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapStablesToFiat not implemented")
}
func (UnimplementedSwapsServer) SwapSpotToFiat(context.Context, *SwapSpotToFiatRequest) (*SwapSpotToFiatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapSpotToFiat not implemented")
}
func (UnimplementedSwapsServer) mustEmbedUnimplementedSwapsServer() {}
func (UnimplementedSwapsServer) testEmbeddedByValue()               {}

// UnsafeSwapsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapsServer will
// result in compilation errors.
type UnsafeSwapsServer interface {
	mustEmbedUnimplementedSwapsServer()
}

func RegisterSwapsServer(s grpc.ServiceRegistrar, srv SwapsServer) {
	// If the following call pancis, it indicates UnimplementedSwapsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Swaps_ServiceDesc, srv)
}

func _Swaps_SwapStablesToSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapStablesToSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).SwapStablesToSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_SwapStablesToSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).SwapStablesToSpot(ctx, req.(*SwapStablesToSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swaps_SwapStablesToFiat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapStablesToFiatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).SwapStablesToFiat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_SwapStablesToFiat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).SwapStablesToFiat(ctx, req.(*SwapStablesToFiatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swaps_SwapSpotToFiat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapSpotToFiatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapsServer).SwapSpotToFiat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swaps_SwapSpotToFiat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapsServer).SwapSpotToFiat(ctx, req.(*SwapSpotToFiatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Swaps_ServiceDesc is the grpc.ServiceDesc for Swaps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swaps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Swaps",
	HandlerType: (*SwapsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SwapStablesToSpot",
			Handler:    _Swaps_SwapStablesToSpot_Handler,
		},
		{
			MethodName: "SwapStablesToFiat",
			Handler:    _Swaps_SwapStablesToFiat_Handler,
		},
		{
			MethodName: "SwapSpotToFiat",
			Handler:    _Swaps_SwapSpotToFiat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
